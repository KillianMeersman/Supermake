help_attach = "attach - Attach a tty to stdin/stdout of a running container for debug sessions. Stop detachment with Ctrl+p Ctrl+q" # testing... sss
help_build = "build - Build the production justrussel api service docker image"
help_console = "console - Start a console running bash"
help_deploy = "deploy - Deploy the service to Google Cloudrun"
help_publish = "publish - Tag and push the docker image"
help_server = "server - Start a development server"
help_start = "start - Start all services in production mode"
help_test = "test - Run all unit and integration tests"

export ENVIRONMENT ?= staging
export API_VERSION ?= local
export API_VERSION_CLEAN = $(shell echo $(API_VERSION) | sed 's/\./-/g')
export API_IMAGE := europe-docker.pkg.dev/just-russel/docker/backend/api:$(API_VERSION)
export AUXILIARY_VERSION ?= $(API_VERSION)
export NAMESPACE := $(ENVIRONMENT)
export SERVICE_ACCOUNT := $(ENVIRONMENT)

export SENTRY_ORG := just-russel

STAGING_DIR = $(shell mktemp -d)

# This help target is first because it is the default when
# not specifying one.
help: anotherhelp
	@python:3 sh -c
	# echo "$(ls -l /etc)" > test.txt
	ls -l
	pwd
	echo $(STAGING_DIR)
	echo $(help_attach)
	echo $(help_build)
	echo $(help_console)
	echo $(help_deploy)
	echo $(help_publish)
	echo $(help_server)
	echo $(help_start)
	echo $(help_test)

anotherhelp: anotherhelp2
	echo testing!!!

anotherhelp2:
	echo "Hello from local shell $NAMESPACE"

	@local python3 -c
	import os
	print("Hello from local python", os.environ["NAMESPACE"])

	@alpine:3 sh -c
	echo "Hello from docker shell $NAMESPACE"
	echo 'docker shell' > test-docker-sh.txt

	@python:3 python -c
	import os
	print("Hello from docker python", os.environ["NAMESPACE"])
	open("test-docker-python.txt", "w+").write("docker python")

	@alpine:3 sh -c
	echo "hello $NAMESPACE!"

	test_a: test_b
		echo "test_a is running!"
		echo "test_a done"

	test_b:
		echo "test_b is running!"
		echo "test_b done"

	test_c:
		echo "test_c is running!"
		echo "test_c done"
